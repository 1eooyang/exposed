import com.android.builder.core.BuilderConstants

apply plugin: 'com.android.library'


android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"


    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"


    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // Only build the release variant
    variantFilter { variant ->
        if (variant.buildType.name != BuilderConstants.RELEASE) {
            variant.ignore = true
        }
    }

    lintOptions {
        abortOnError false
    }

}

// Make sure that hiddenapistubs are placed before the Android SDK in app.iml
// as there doesn't seem to be any way to configure this in Android Studio.
task fixIml {
    ext.imlFile = projectDir.absolutePath + '/' + project.name + '.iml'
    inputs.file imlFile
    outputs.file imlFile

    doLast {
        if (!file(imlFile).exists())
            return

        // Parse the existing iml file
        def parse = new XmlParser().parse(imlFile)
        def moduleComponent = parse.component.find { it.@name == 'NewModuleRootManager' }

        // Check if it has already been fixed
        def orderEntries = moduleComponent.orderEntry
        if (orderEntries.find { it.@type == 'module' && it.@'module-name' == 'hiddenapistubs' })
            return

        // Determine the index of the Android SDK entry
        def jdkOrderEntry = orderEntries.find { it.@type == 'jdk' }
        def jdkOrderEntryIndex = moduleComponent.children().indexOf(jdkOrderEntry)

        // Add the new entry just before it
        moduleComponent.children().add(jdkOrderEntryIndex, new Node(null, 'orderEntry',
                ['type': 'module', 'module-name': 'hiddenapistubs', 'exported': '']))

        // Write the fixed iml file
        def printer = new XmlNodePrinter(new PrintWriter(new FileWriter(imlFile)))
        printer.preserveWhitespace = true
        printer.print(parse)
    }
}

tasks.preBuild.dependsOn fixIml

tasks.preBuild << {
    tasks.withType(JavaCompile) {

        // Add the hidden API stub classes to the bootclasspath.
        // As they have to be injected before the official SDK classes and must not be part of the
        // final JAR/APK, the best way seems to compile them in a separate project and use some dirty
        // magic to add its output directory to all variants' configuration.
        def hiddenapi = project(':hiddenapistubs')
        def hiddenapiCompiler = hiddenapi.android.libraryVariants[0].javaCompiler
        def hiddenapiDestPath = hiddenapiCompiler.destinationDir.getAbsolutePath()
        options.compilerArgs.add('-Xbootclasspath/p:' + hiddenapiDestPath)
    }
}

dependencies {
    provided project(':hiddenapistubs')
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'me.weishu:epic:0.1.4'
}

version = '0.1.4'

//apply plugin: 'com.novoda.bintray-release'
//
//publish {
//    userOrg = 'twsxtd'//
//    groupId = 'me.weishu.exposed'
//    artifactId = 'exposed-xposedapi'
//    publishVersion = "0.1.4"
//    desc = 'Xposed Wrapper in non-root environment'
//    website = 'https://github.com/tiann/epic'
//}


